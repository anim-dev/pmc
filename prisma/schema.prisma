generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id             Int     @id @default(autoincrement())
  organizationId Int     @map("organizationid")
  username       String
  email          String?
  designation    String?
  phone          String?
  passwordHash   String? @map("passwordhash")
  firstName      String? @map("firstname")
  lastName       String? @map("lastname")
  displayName    String? @map("displayname")
  title          String?
  password       String?
  isActive       Boolean @default(false) @map("isactive")
}

model authtokens {
  id                BigInt   @id @default(autoincrement())
  accessToken       String?  @map("accesstoken")
  citizenId         BigInt?  @map("citizenid")
  userId            Int?     @map("userid")
  created           DateTime
  expires           DateTime
  citizenLoginOtpId BigInt?  @map("citizenloginotpid")
}

model citizenloginotps {
  id        BigInt   @id @default(autoincrement())
  otp       String?
  created   DateTime
  phone     String?
  citizenId BigInt?  @map("citizenid")
}

model citizens {
  id                    BigInt   @id @default(autoincrement())
  organizationId        Int      @map("organizationid")
  name                  String?
  gender                String?
  phone                 String?
  isBharariPathakUser   Boolean  @map("isbhararipathakuser")
}

model complaintevidences {
  id          BigInt   @id @default(autoincrement())
  complaintId BigInt?  @map("complaintid")
  type        Int
  filePath    String?  @map("filepath")
}

model complaintfeedbacks {
  id        BigInt   @id @default(autoincrement())
  complaintId BigInt? @map("complaintid")
  rating    Int
  text      String?
  timestamp DateTime
}

model complaintstatuslogevidences {
  id                   BigInt   @id @default(autoincrement())
  type                 Int
  filePath             String?  @map("filepath")
  complaintStatusLogId BigInt?  @map("complaintstatuslogid")
}

model complaintstatuslogs {
  id           BigInt   @id @default(autoincrement())
  status       String?
  timestamp    DateTime
  complaintId  BigInt?  @map("complaintid")
  updatedById  Int?     @map("updatedbyid")
  forUserId    Int?     @map("foruserid")
  remarks      String?
  logMessage   String?  @map("logmessage")
  latitude     String?
  longitude    String?
}

model complaints {
  id                    BigInt   @id @default(autoincrement())
  complaintId           String?  @map("complaintid")
  latitude              String?
  longitude             String?
  address               String?
  description           String?
  potholeCount          Int      @map("potholecount")
  potholeTypeId         Int?     @map("pothholetypeid")
  timestamp             DateTime
  citizenId             BigInt?  @map("citizenid")
  organizationId        Int?     @map("organizationid")
  prabhagId             Int?     @map("prabhagid")
  isFlaggedForNodal     Boolean  @default(false) @map("isflaggedfornodal")
}

model organizations {
  id          Int    @id @default(autoincrement())
  name        String?
  hostName    String? @map("hostname")
  apiHostName String? @map("apihostname")
  isDeleted   Boolean  @map("isdeleted")
  logo        String?
}

model potholetypes {
  id             Int      @id @default(autoincrement())
  name           String?
  organizationId Int?     @map("organizationid")
  isActive       Boolean  @default(false) @map("isactive")
}

model prabhaggeocoordinates {
  id             Int    @id @default(autoincrement())
  prabhagId      Int?   @map("prabhagid")
  kml            String?
  organizationId Int?   @map("organizationid")
}

model prabhags {
  id        Int     @id @default(autoincrement())
  niceId    Int     @map("niceid")
  objectId  Int     @map("objectid")
  name      String?
  wardId    Int?    @map("wardid")
  subId     String? @map("subid")
  isActive  Boolean @default(false) @map("isactive")
}

model roles {
  id             Int    @id @default(autoincrement())
  name           String?
  organizationId Int?   @map("organizationid")
}

model smslogs {
  id              BigInt   @id @default(autoincrement())
  timestamp       DateTime
  templateId      String?  @map("templateid")
  body            String?
  phone           String?
  citizenId       BigInt?  @map("citizenid")
  userId          Int?     @map("userid")
  reason          String?
  isSent          Boolean  @map("issent")
  isDelivered     String?  @map("isdelivered")
  gatewayRecordId String?  @map("gatewayrecordid")
  complaintId     BigInt?  @map("complaintid")
}

model userprabhags {
  id       Int   @id @default(autoincrement())
  userId   Int?  @map("userid")
  prabhagId Int? @map("prabhagid")
}

model userroles {
  id     Int   @id @default(autoincrement())
  userId Int?  @map("userid")
  roleId Int?  @map("roleid")
}

model userwards {
  id     Int   @id @default(autoincrement())
  userId Int?  @map("userid")
  wardId Int?  @map("wardid")
}

model userzones {
  id     Int   @id @default(autoincrement())
  userId Int?  @map("userid")
  zoneId Int?  @map("zoneid")
}

model wards {
  id       Int     @id @default(autoincrement())
  niceId   Int     @map("niceid")
  name     String?
  zoneId   Int?    @map("zoneid")
  isActive Boolean @default(false) @map("isactive")
}

model workqualitystandards {
  id                   BigInt  @id @default(autoincrement())
  usedStandard1        Boolean @map("usedstandard1")
  usedStandard2        Boolean @map("usedstandard2")
  usedStandard3        Boolean @map("usedstandard3")
  usedStandard4        Boolean @map("usedstandard4")
  complaintStatusLogId BigInt? @map("complaintstatuslogid")
}

model zones {
  id             Int     @id @default(autoincrement())
  niceId         String? @map("niceid")
  name           String?
  organizationId Int     @map("organizationid")
  isActive       Boolean @default(false) @map("isactive")
}

model work {
  id        Int      @id @default(autoincrement())
  name      String
  code      String?
  isActive  Boolean  @default(true) @map("isactive")
  createdAt DateTime @default(now()) @map("createdat")
  updatedAt DateTime @updatedAt @map("updatedat")
}

model master_table_map {
  id        Int    @id @default(autoincrement())
  code      String @unique
  tableName String @map("tablename")
  isActive  Boolean @default(true) @map("isactive")
}

model project {
  id                  Int      @id @default(autoincrement())
  title               String
  projectCost         Float    @map("projectcost")
  fromDate            DateTime @map("fromdate")
  toDate              DateTime @map("todate")
  zoneId              Int      @map("zoneid")
  contractorName      String   @map("contractorname")
  outwardNumber       String   @map("outwardnumber")
  typeOfWork          String   @map("type_of_work")
  outwardDate         DateTime @map("outwarddate")
  imagePath           String?  @map("imagepath")
  jeName              String?  @map("je_name")
  deName              String?  @map("de_name")
  eeName              String?  @map("ee_name")
  consultant          String?  @map("consultant")
  qualityAssurance    String?  @map("qualityassurance")
  description         String?  @map("description")
  projectStatusId     Int      @map("project_status_id")
  createdAt           DateTime @default(now()) @map("createdat")
  updatedAt           DateTime @updatedAt      @map("updatedat")
  createdBy           Int      @map("createdby")
  updatedBy           Int      @map("updatedby")
  isActive            Boolean  @default(true)  @map("isactive")

  // Relations
  stageTypeMappings         project_stage_type_mapping[]  @relation("ProjectStageTypeMappings")
  stageTypeStatusMappings   project_stage_type_status_mapping[] @relation("ProjectStageTypeStatusMappings")

  @@map("project")
}

model project_stage_type_mapping {
  id            Int      @id @default(autoincrement())
  projectId     Int      @map("project_id")
  stageTypeId   Int      @map("stage_type_id")
  otherTypeName String?  @map("other_type_name")
  isActive      Boolean  @default(true) @map("isactive")
  createdAt     DateTime @default(now()) @map("createdat")

  // Relations
  project        project  @relation(fields: [projectId], references: [id], name: "ProjectStageTypeMappings")
  stageType      stage_type @relation(fields: [stageTypeId], references: [id])
  statusMappings project_stage_type_status_mapping[] @relation("StageTypeMappingToStatusMappings")
}

model project_stage_type_status_mapping {
  id                 Int      @id @default(autoincrement())
  projectId          Int      @map("project_id")
  stageTypeId        Int      @map("stage_type_id")
  stageTypeMappingId Int      @map("stage_type_mapping_id")
  isActive           Boolean  @default(true) @map("isactive")
  createdAt          DateTime @default(now()) @map("createdat")
  stageProgress      Int      @default(0)    @map("stage_progress")
  stageStatusId      Int      @map("stage_status_id")
  stageBudgetId      Int      @map("stage_budget_id")
  stageFromDate      DateTime @map("stage_from_date")
  stageToDate        DateTime @map("stage_to_date")
  stageImgPath       String   @map("stage_img_path")
  stageDesc          String   @map("stage_desc")

  // Relations
  projectStageTypeMapping project_stage_type_mapping @relation(fields: [stageTypeMappingId], references: [id], name: "StageTypeMappingToStatusMappings")
  project                project @relation(fields: [projectId], references: [id], name: "ProjectStageTypeStatusMappings")
  stageType              stage_type @relation(fields: [stageTypeId], references: [id])
}

model stage_type {
  id         Int      @id @default(autoincrement())
  name       String
  code       String
  isActive   Boolean  @default(true) @map("isactive")
  createdAt  DateTime @default(now()) @map("createdat")
  updatedAt  DateTime @updatedAt      @map("updatedat")

  // Relations
  stageTypeMappings         project_stage_type_mapping[]
  stageTypeStatusMappings   project_stage_type_status_mapping[]
}

model status_type {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  isActive  Boolean  @default(true) @map("isactive")
  createdAt DateTime @default(now()) @map("createdat")
  updatedAt DateTime @updatedAt @map("updatedat")
}

model budget_utilization {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  isActive  Boolean  @default(true) @map("isactive")
  createdAt DateTime @default(now()) @map("createdat")
  updatedAt DateTime @updatedAt @map("updatedat")
}
