generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id             Int     @id @default(autoincrement())
  organizationid Int
  username       String
  email          String?
  designation    String?
  phone          String?
  passwordhash   String?
  firstname      String?
  lastname       String?
  displayname    String?
  title          String?
  password       String?
  isactive       Boolean @default(false)
}

model authtokens {
  id                  BigInt   @id @default(autoincrement())
  accesstoken         String?
  citizenid           BigInt?
  userid              Int?
  created             DateTime
  expires             DateTime
  citizenloginotpid   BigInt?
}

model citizenloginotps {
  id          BigInt   @id @default(autoincrement())
  otp         String?
  created     DateTime
  phone       String?
  citizenid   BigInt?
}

model citizens {
  id                  BigInt   @id @default(autoincrement())
  organizationid      Int
  name                String?
  gender              String?
  phone               String?
  isbhararipathakuser Boolean
}

model complaintevidences {
  id           BigInt   @id @default(autoincrement())
  complaintid  BigInt?
  type         Int
  filepath     String?
}

model complaintfeedbacks {
  id           BigInt   @id @default(autoincrement())
  complaintid  BigInt?
  rating       Int
  text         String?
  timestamp    DateTime
}

model complaintstatuslogevidences {
  id                    BigInt   @id @default(autoincrement())
  type                  Int
  filepath              String?
  complaintstatuslogid  BigInt?
}

model complaintstatuslogs {
  id            BigInt   @id @default(autoincrement())
  status        String?
  timestamp     DateTime
  complaintid   BigInt?
  updatedbyid   Int?
  foruserid     Int?
  remarks       String?
  logmessage    String?
  latitude      String?
  longitude     String?
}

model complaints {
  id                    BigInt   @id @default(autoincrement())
  complaintid           String?
  latitude              String?
  longitude             String?
  address               String?
  description           String?
  potholecount          Int
  pothholetypeid        Int?
  timestamp             DateTime
  citizenid             BigInt?
  organizationid        Int?
  prabhagid             Int?
  isflaggedfornodal     Boolean  @default(false)
}

model organizations {
  id             Int      @id @default(autoincrement())
  name           String?
  hostname       String?
  apihostname    String?
  isdeleted      Boolean
  logo           String?
}

model potholetypes {
  id             Int      @id @default(autoincrement())
  name           String?
  organizationid Int?
  isactive       Boolean  @default(false)
}

model prabhaggeocoordinates {
  id             Int      @id @default(autoincrement())
  prabhagid      Int?
  kml            String?
  organizationid Int?
}

model prabhags {
  id         Int      @id @default(autoincrement())
  niceid     Int
  objectid   Int
  name       String?
  wardid     Int?
  subid      String?
  isactive   Boolean  @default(false)
}

model roles {
  id             Int      @id @default(autoincrement())
  name           String?
  organizationid Int?
}

model smslogs {
  id                BigInt   @id @default(autoincrement())
  timestamp         DateTime
  templateid        String?
  body              String?
  phone             String?
  citizenid         BigInt?
  userid            Int?
  reason            String?
  issent            Boolean
  isdelivered       String?
  gatewayrecordid   String?
  complaintid       BigInt?
}

model userprabhags {
  id         Int      @id @default(autoincrement())
  userid     Int?
  prabhagid  Int?
}

model userroles {
  id       Int      @id @default(autoincrement())
  userid   Int?
  roleid   Int?
}

model userwards {
  id       Int      @id @default(autoincrement())
  userid   Int?
  wardid   Int?
}

model userzones {
  id       Int      @id @default(autoincrement())
  userid   Int?
  zoneid   Int?
}

model wards {
  id         Int      @id @default(autoincrement())
  niceid     Int
  name       String?
  zoneid     Int?
  isactive   Boolean  @default(false)
}

model workqualitystandards {
  id                    BigInt   @id @default(autoincrement())
  usedstandard1         Boolean
  usedstandard2         Boolean
  usedstandard3         Boolean
  usedstandard4         Boolean
  complaintstatuslogid  BigInt?
}

model zones {
  id              Int      @id @default(autoincrement())
  niceid          String?
  name            String?
  organizationid  Int
  isactive        Boolean  @default(false)
}

model work {
  id      Int    @id @default(autoincrement())
  name    String
  code    String?
  isactive Boolean @default(true)
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model master_table_map {
  id        Int    @id @default(autoincrement())
  code      String @unique 
  tablename String
  isactive  Boolean @default(true)
}

model project {
  id                  Int      @id @default(autoincrement())
  title               String
  projectcost         Float
  fromdate            DateTime
  todate              DateTime
  zoneid              Int      // Reference to your zones table, or remove if just string
  contractorname      String
  outwardnumber       String
  type_of_work        String   // Or use Int if referencing work table
  outwarddate         DateTime
  imagepath           String?  // Store image file path, nullable if not always present
  je_name             String?  // Junior Engineer
  de_name             String?  // Deputy Engineer
  ee_name             String?  // Executive Engineer
  consultant          String?
  qualityassurance    String?
  description         String?
  createdat           DateTime @default(now())
  updatedat           DateTime @updatedAt
  isactive            Boolean  @default(true)

  project_status_mappings project_status_mapping[]
}

model stage_type {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  isactive  Boolean  @default(true)
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model project_status {
  id        Int      @id @default(autoincrement())
  name      String   // e.g., "Pending", "In Progress", "Completed"
  code      String   // e.g., "PENDING", "IN_PROGRESS", "COMPLETED"
  isactive  Boolean  @default(true)
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt

  // Relation for mappings
  project_status_mappings project_status_mapping[]
}

model project_status_mapping {
  id         Int           @id @default(autoincrement())
  project_id Int
  status_id  Int
  changedat  DateTime      @default(now()) // Optionally track status change time

  // Relations
  project     project?        @relation(fields: [project_id], references: [id])
  status      project_status  @relation(fields: [status_id], references: [id])
}

model budget_utilization {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  isactive  Boolean  @default(true)
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}
